"""
Report generation class
Creates detailed reports in TXT and HTML formats
"""

from datetime import datetime
import os


class ReportGenerator:
    """Class for managing report generation operations"""
    
    def __init__(self):
        """Initialize ReportGenerator"""
        self.report_version = "1.0"
        self.encoding = 'utf-8'
    
    def _calculate_summary(self, results):
        """
        Calculate comprehensive summary statistics from results
        
        Args:
            results (list): List of check results
            
        Returns:
            dict: Summary statistics dictionary
        """
        if not results:
            return {
                'ping_ok': 0, 'port_ok': 0, 'full_access': 0, 'total_hosts': 0,
                'ping_fail': 0, 'port_fail': 0, 'no_access': 0, 'partial_access': 0,
                'ping_success_rate': 0, 'port_success_rate': 0, 'full_access_rate': 0
            }
        
        # Count different result types
        ping_ok = len([r for r in results if "PING ✓" in r])
        port_ok = len([r for r in results if "TCP" in r and "✓" in r])
        full_access = len([r for r in results if "FULL ACCESS" in r])
        partial_access = len([r for r in results if "PING OK, PORT CLOSED" in r])
        no_access = len([r for r in results if "NO ACCESS" in r])
        total_hosts = len(results)
        
        # Calculate rates
        ping_success_rate = (ping_ok / total_hosts * 100) if total_hosts > 0 else 0
        port_success_rate = (port_ok / total_hosts * 100) if total_hosts > 0 else 0
        full_access_rate = (full_access / total_hosts * 100) if total_hosts > 0 else 0
        
        return {
            'ping_ok': ping_ok,
            'port_ok': port_ok,
            'full_access': full_access,
            'partial_access': partial_access,
            'no_access': no_access,
            'total_hosts': total_hosts,
            'ping_fail': total_hosts - ping_ok,
            'port_fail': total_hosts - port_ok,
            'ping_success_rate': ping_success_rate,
            'port_success_rate': port_success_rate,
            'full_access_rate': full_access_rate
        }
    
    def _categorize_results(self, results):
        """
        Categorize results by connection status type
        
        Args:
            results (list): List of check results
            
        Returns:
            dict: Categorized results dictionary
        """
        categories = {
            'full_access': [],      # Both ping and port working
            'ping_only': [],        # Ping works, port closed
            'port_only': [],        # Port open, ping failed
            'no_access': [],        # Neither ping nor port working
            'errors': []            # Errors and timeouts
        }
        
        for result in results:
            if "FULL ACCESS" in result:
                categories['full_access'].append(result)
            elif "PING OK, PORT CLOSED" in result:
                categories['ping_only'].append(result)
            elif "PING FAILED, PORT OPEN" in result:
                categories['port_only'].append(result)
            elif "NO ACCESS" in result:
                categories['no_access'].append(result)
            elif any(keyword in result for keyword in ["ERROR", "TIMEOUT"]):
                categories['errors'].append(result)
            else:
                # Unknown states - treat as no access
                categories['no_access'].append(result)
        
        return categories
    
    def generate_txt_report(self, results, filename):
        """
        Generate comprehensive TXT format report
        
        Args:
            results (list): List of check results
            filename (str): Output file name
        """
        summary = self._calculate_summary(results)
        categories = self._categorize_results(results)
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        try:
            with open(filename, 'w', encoding=self.encoding) as file:
                # Header and general information
                file.write("🌐 TCP PORT AND PING CHECK REPORT\n")
                file.write("=" * 70 + "\n")
                file.write(f"Report Date     : {current_time}\n")
                file.write(f"Report Version  : {self.report_version}\n")
                file.write(f"Hosts Checked   : {summary['total_hosts']} hosts\n")
                file.write(f"Generated by    : TCP Port and Ping Checker\n")
                file.write("=" * 70 + "\n\n")
                
                # Executive Summary
                file.write("📊 EXECUTIVE SUMMARY\n")
                file.write("-" * 40 + "\n")
                file.write(f"Overall Success Rate    : {summary['full_access_rate']:5.1f}%\n")
                file.write(f"Network Connectivity    : {summary['ping_success_rate']:5.1f}%\n")
                file.write(f"Service Availability    : {summary['port_success_rate']:5.1f}%\n")
                file.write("\n")
                
                # Detailed Statistics
                file.write("📈 DETAILED STATISTICS\n")
                file.write("-" * 40 + "\n")
                file.write(f"Total Hosts Tested      : {summary['total_hosts']:3d}\n")
                file.write(f"Ping Successful         : {summary['ping_ok']:3d} ({summary['ping_success_rate']:5.1f}%)\n")
                file.write(f"Port Accessible         : {summary['port_ok']:3d} ({summary['port_success_rate']:5.1f}%)\n")
                file.write(f"Full Access             : {summary['full_access']:3d} ({summary['full_access_rate']:5.1f}%)\n")
                file.write(f"Partial Access          : {summary['partial_access']:3d}\n")
                file.write(f"No Access               : {summary['no_access']:3d}\n")
                file.write(f"Ping Failures           : {summary['ping_fail']:3d}\n")
                file.write(f"Port Failures           : {summary['port_fail']:3d}\n")
                file.write("\n")
                
                # Status Distribution
                file.write("📋 STATUS DISTRIBUTION\n")
                file.write("-" * 70 + "\n")
                file.write(f"🟢 Full Access: {len(categories['full_access'])} hosts\n")
                file.write(f"🟡 Ping Only: {len(categories['ping_only'])} hosts\n")
                file.write(f"🟠 Port Only: {len(categories['port_only'])} hosts\n")
                file.write(f"🔴 No Access: {len(categories['no_access'])} hosts\n")
                file.write(f"❌ Errors: {len(categories['errors'])} hosts\n")
                file.write("\n")
                
                # Detailed Results Table
                file.write("📋 DETAILED RESULTS\n")
                file.write("-" * 70 + "\n")
                file.write(f"{'IP ADDRESS':15} | {'PING':8} | {'PORT':10} | STATUS\n")
                file.write("-" * 70 + "\n")
                
                # Group results by category for better readability
                if categories['full_access']:
                    file.write("# FULL ACCESS HOSTS (Ping ✓ + Port ✓)\n")
                    for result in categories['full_access']:
                        file.write(result + "\n")
                    file.write("\n")
                
                if categories['ping_only']:
                    file.write("# PING ACCESS ONLY (Ping ✓ + Port ✗)\n")
                    for result in categories['ping_only']:
                        file.write(result + "\n")
                    file.write("\n")
                
                if categories['port_only']:
                    file.write("# PORT ACCESS ONLY (Ping ✗ + Port ✓)\n")
                    for result in categories['port_only']:
                        file.write(result + "\n")
                    file.write("\n")
                
                if categories['no_access']:
                    file.write("# NO ACCESS HOSTS (Ping ✗ + Port ✗)\n")
                    for result in categories['no_access']:
                        file.write(result + "\n")
                    file.write("\n")
                
                if categories['errors']:
                    file.write("# ERRORS AND TIMEOUTS\n")
                    for result in categories['errors']:
                        file.write(result + "\n")
                    file.write("\n")
                
                # Analysis and Insights
                file.write("=" * 70 + "\n")
                file.write("🔍 ANALYSIS AND INSIGHTS\n")
                file.write("=" * 70 + "\n")
                
                # Network Analysis
                file.write("🌐 NETWORK ANALYSIS\n")
                file.write("-" * 20 + "\n")
                
                if summary['ping_fail'] > summary['port_fail']:
                    file.write("• Primary Issue: Network connectivity problems detected\n")
                    file.write("• Recommendation: Check network infrastructure, routing, and firewalls\n")
                elif summary['port_fail'] > summary['ping_fail']:
                    file.write("• Primary Issue: Service availability problems detected\n")
                    file.write("• Recommendation: Check service configurations and port settings\n")
                else:
                    file.write("• Mixed connectivity and service issues detected\n")
                
                # Health Assessment
                file.write("\n🏥 HEALTH ASSESSMENT\n")
                file.write("-" * 20 + "\n")
                
                if summary['full_access_rate'] >= 90:
                    file.write("• System Status: EXCELLENT - High success rate\n")
                    file.write("• Overall Health: System appears to be functioning well\n")
                elif summary['full_access_rate'] >= 70:
                    file.write("• System Status: GOOD - Acceptable performance\n")
                    file.write("• Overall Health: Minor issues may need attention\n")
                elif summary['full_access_rate'] >= 50:
                    file.write("• System Status: FAIR - Significant issues present\n")
                    file.write("• Overall Health: Multiple problems require investigation\n")
                else:
                    file.write("• System Status: POOR - Major connectivity issues\n")
                    file.write("• Overall Health: Critical problems need immediate attention\n")
                
                # Recommendations
                file.write("\n💡 RECOMMENDATIONS\n")
                file.write("-" * 20 + "\n")
                
                recommendations = self._generate_recommendations(summary, categories)
                for recommendation in recommendations:
                    file.write(f"• {recommendation}\n")
                
                # Technical Notes
                file.write("\n🔧 TECHNICAL NOTES\n")
                file.write("-" * 20 + "\n")
                file.write("• Ping tests check basic network connectivity (ICMP)\n")
                file.write("• Port tests verify specific service availability (TCP)\n")
                file.write("• Timeouts may indicate network latency or filtering\n")
                file.write("• Mixed results suggest selective connectivity issues\n")
                
                # Footer
                file.write(f"\n" + "=" * 70 + "\n")
                file.write(f"Report generated: {current_time}\n")
                file.write(f"Total records processed: {len(results)}\n")
                file.write(f"Report format: TXT v{self.report_version}\n")
                
            print(f"✅ TXT report generated: {filename}")
            
        except Exception as e:
            print(f"❌ Error generating TXT report: {str(e)}")
            raise
    
    def generate_html_report(self, results, filename):
        """
        Generate interactive HTML format report
        
        Args:
            results (list): List of check results
            filename (str): Output file name
        """
        summary = self._calculate_summary(results)
        categories = self._categorize_results(results)
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        try:
            html_content = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TCP Port Check Report - {current_time}</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }}
        
        .container {{
            max-width: 1400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }}
        
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }}
        
        .header h1 {{
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }}
        
        .header p {{
            font-size: 1.1em;
            opacity: 0.9;
        }}
        
        .content {{
            padding: 30px;
        }}
        
        .summary-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}
        
        .summary-card {{
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border-left: 5px solid;
            transition: transform 0.3s ease;
        }}
        
        .summary-card:hover {{
            transform: translateY(-5px);
        }}
        
        .card-success {{ border-left-color: #28a745; }}
        .car